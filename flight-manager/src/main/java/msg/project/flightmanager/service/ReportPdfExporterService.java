package msg.project.flightmanager.service;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfWriter;

import msg.project.flightmanager.exceptions.FlightManagerException;
import msg.project.flightmanager.model.Flight;
import msg.project.flightmanager.model.Plane;
import msg.project.flightmanager.model.Report;

@Service
public class ReportPdfExporterService {
	
	public void exportToPdf(Report report) {
		String reportIdentifier =  report.getFlight().getIdFlight() + "-" + report.getReportCode();
		String path = System.getProperty("user.home") + "/Downloads/report-" + reportIdentifier+ ".pdf";
		
		Document document = new Document(PageSize.A4);
		
		try {
			PdfWriter.getInstance(document, new FileOutputStream(path));
			
			document.open();
            addMetaData(document, report.getReportCode(), report.getReportedBy().getUsername());
            addTitlePage(document, reportIdentifier);
            addContent(document, report);
            document.close();

		} catch (FileNotFoundException e) {
			e.printStackTrace();
			new FlightManagerException(
					HttpStatus.NOT_FOUND,
					"File not found");
		} catch (DocumentException e) {
			e.printStackTrace();
			new FlightManagerException(
					HttpStatus.EXPECTATION_FAILED,
					"Error occured when creating the pdf document");
		}
	}

	
	private void addMetaData(Document document, String reportCode, String username) {
		document.addTitle("Report flight");
        document.addSubject(reportCode);
        document.addKeywords(reportCode);
        document.addAuthor(username);
        document.addCreator(username);
	}
	
	private void addTitlePage(Document document, String reportIdentifier) throws DocumentException {
		Paragraph emptyParagraph = new Paragraph();
		addCustomLine(emptyParagraph, 1, " ");
		
		Paragraph title = new Paragraph("Report-" + reportIdentifier);
		
		PdfPCell cellTitle = new PdfPCell();
		cellTitle.setFixedHeight(25f);
		cellTitle.setHorizontalAlignment(PdfPCell.ALIGN_CENTER);
		
		cellTitle.addElement(emptyParagraph);
		cellTitle.addElement(title);
		
		document.add(cellTitle);
	}
	
	private void addContent(Document document, Report report) {
		addCustomLine(new Paragraph(), 2, " ");
		
		PdfPCell reportInfo = new PdfPCell();
		
		setReportDetails(reportInfo, report);
		setFlightDetails(reportInfo, report.getFlight());
		setPlaneDeatils(reportInfo, report.getFlight().getPlane());
		setReportContentMessage(reportInfo, report.getContent());
	}
	
	private void setReportDetails(PdfPCell reportInfo, Report report) {
		Paragraph generatedBy = new Paragraph("Generated by: " + report.getReportedBy().getFirstName() +
				" " + report.getReportedBy().getLastName() + ", " + report.getReportedBy().getUsername());
		Paragraph generatedAt = new Paragraph("Generated at: " + report.getGeneratedAt());
		Paragraph reportCode = new Paragraph("Report code: " + report.getReportCode());
		Paragraph reportType = new Paragraph(report.getReportType().getLabel().toUpperCase());
		
		Paragraph linedParagraph = new Paragraph();
		addCustomLine(linedParagraph, 1, "-".repeat(135));
		
		reportInfo.addElement(generatedBy);
		reportInfo.addElement(generatedAt);
		reportInfo.addElement(reportCode);
		reportInfo.addElement(reportType);
		reportInfo.addElement(linedParagraph);
	}
	
	private void setFlightDetails(PdfPCell reportInfo, Flight flight) {
		String countryDepart = flight.getFrom().getAddress().getCountry();
		String cityDepart = flight.getFrom().getAddress().getCity();
		String streetDepart = flight.getFrom().getAddress().getStreet();
		String countryArrival = flight.getTo().getAddress().getCountry();
		String cityArrival = flight.getTo().getAddress().getCity();
		String streetArrival = flight.getTo().getAddress().getStreet();
		
		Paragraph flightDetails = new Paragraph("Flight details:");
		Paragraph flightName = new Paragraph("Flight name: " + flight.getFlightName());
		Paragraph airportDepart = new Paragraph("Airport deparature: " + countryDepart + ", " + ", " + cityDepart + ", " + streetDepart);
		Paragraph deparatureTime = new Paragraph("Deparature time: " + flight.getBoardingTime());
		Paragraph airportArrival = new Paragraph("Airport arrival: " + countryArrival + ", " + ", " + cityArrival + ", " + streetArrival);
		Paragraph duration = new Paragraph("Duration: " + flight.getDuration());
		Paragraph linedParagraph = new Paragraph();
		addCustomLine(linedParagraph, 1, "-".repeat(135));
		
		reportInfo.addElement(flightDetails);
		reportInfo.addElement(flightName);
		reportInfo.addElement(airportDepart);
		reportInfo.addElement(deparatureTime);
		reportInfo.addElement(airportArrival);
		reportInfo.addElement(duration);
		reportInfo.addElement(linedParagraph);
	}
	
	private void setPlaneDeatils(PdfPCell reportInfo, Plane plane) {
		Paragraph planeDetails = new Paragraph("Plane details: ");
		Paragraph companyName = new Paragraph("From company: " + plane.getCompany().getName());
		Paragraph tailNumber = new Paragraph("Tail number: " + plane.getTailNumber());
		Paragraph model = new Paragraph("Model: " + plane.getModel());
		Paragraph capacity = new Paragraph("Capcity: " + plane.getCapacity());
		Paragraph manufacturingDate = new Paragraph("Manufactured on: " + plane.getManufacturingDate());
		Paragraph firstFlight = new Paragraph("First flight on: " + plane.getFirstFlight());
		Paragraph lastRevision = new Paragraph("Last revision on: " + plane.getLastRevision());
		Paragraph linedParagraph = new Paragraph();
		addCustomLine(linedParagraph, 1, "-".repeat(135));
		
		reportInfo.addElement(planeDetails);
		reportInfo.addElement(companyName);
		reportInfo.addElement(tailNumber);
		reportInfo.addElement(model);
		reportInfo.addElement(capacity);
		reportInfo.addElement(manufacturingDate);
		reportInfo.addElement(firstFlight);
		reportInfo.addElement(lastRevision);
		reportInfo.addElement(linedParagraph);
	}
	
	private void setReportContentMessage(PdfPCell reportInfo, String reportContent) {
		Paragraph reportContentP = new Paragraph("This report provides the following information: ");
		Paragraph content = new Paragraph(reportContent);
		
		reportInfo.addElement(reportContentP);
		reportInfo.addElement(content);
	}
	
    private void addCustomLine(Paragraph paragraph, int number, String content) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(content));
        }
    }
}
